name: Snyk AWS Demo using GithubActions

#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'name of the Snyk team'
        required: true
        default: 'Snyk TSM APJ'
      country:
        description: 'Country'
        required: false

jobs:
  test_appcode:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: build appcode
      run: mvn install 
    - name: execute automated tests
      run: echo "running automated tests of appcode"
  scan_vulnerability:
    needs: test_appcode
    runs-on: ubuntu-latest
    container: snyk/snyk:maven-3-jdk-8	
    environment: snyk_aws_demo
    env:
      ORG_ID: demo_high
      SNYK_TOKEN: "${{ secrets.SNYK_TOKEN }}"
    steps:
    - uses: actions/checkout@v1
    - name: build appcode
      run: mvn install 
    - name: scan vulnerability with Snyk
      run: |
        snyk test --org=${ORG_ID} --all-projects --detection-depth=8 --print-deps --remote-repo-url=aws_snyk_mvn_goof --severity-threshold=low || true # *1 replace with snyk-filter or snyk-delta
        snyk iac test --org=${ORG_ID} --scan=planned-values || true # *1
        snyk code test --org=${ORG_ID} || true # *1
    - name: monitor/report with Snyk App UI
      run: |
        snyk iac test --org=${ORG_ID} --scan=planned-values --report || true # *1
        snyk monitor --org=${ORG_ID} --all-projects --detection-depth=8 --print-deps --remote-repo-url=aws_snyk_mvn_goof # *1
  refresh_container:
    needs: scan_vulnerability
    environment: snyk_aws_demo
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: "1"
      DOCKER_LOGIN: "${{ secrets.DOCKER_LOGIN }}"
      ORG_ID: demo_high
      SNYK_TOKEN: "${{ secrets.SNYK_TOKEN }}"
    steps:
    - uses: actions/checkout@v1
    - name: build container image
      run: docker image build . --file Dockerfile --tag ${{env.DOCKER_LOGIN}}/my-snyk-demo-mvn-goof:latest
    - name: scan vulnerability
      run: docker run --env SNYK_TOKEN -v /var/run/docker.sock:/var/run/docker.sock snyk/snyk:docker snyk container test --print-deps --org=${ORG_ID} --project-name=${{github.repository}} --app-vulns --nested-jars-depth=8 ${{env.DOCKER_LOGIN}}/my-snyk-demo-mvn-goof:latest|| true # *1
    - name: monitor container image for vulnerability
      run: docker run --env SNYK_TOKEN -v /var/run/docker.sock:/var/run/docker.sock snyk/snyk:docker snyk container monitor --print-deps --org=${ORG_ID} --project-name=${{github.repository}} --app-vulns --nested-jars-depth=8 ${{env.DOCKER_LOGIN}}/my-snyk-demo-mvn-goof:latest || true # *1
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_LOGIN }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: push container image
      run: docker push ${{env.DOCKER_LOGIN}}/my-snyk-demo-mvn-goof:latest
  terraform:
    needs: refresh_container
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: snyk_aws_demo
    env:
      AWS_REGION: ap-northeast-1
      DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1    

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=./terraform/ecs init -input=false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check ./terraform/ecs

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=./terraform/ecs plan -input=false -out=tfplan

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". 
    # See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: |
        terraform -chdir=./terraform/ecs apply \
          -auto-approve -input=false \
          -var docker_img_name=${DOCKER_LOGIN}/my-snyk-demo-mvn-goof \
          -var docker_img_tag=latest \
          -auto-approve
        export ENDPOINT="$(terraform -chdir=./terraform/ecs output load_balancer_hostname)"
        mkdir -p /tmp/ecs/
        echo 'export ENDPOINT='${ENDPOINT} > /tmp/ecs/endpoint
    # specify path for persisting data
    - name: persisting data
      uses: actions/upload-artifact@v3
      with:
        name: tempFiles
        path: /tmp/ecs/*
    # sleep and hold the actions process for 90 sec
    - name: sleep and hold the actions process
      run: sleep 45s
      shell: bash
