name: snyk_demo_aws_deploy_terraform_destroy

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'name of the Snyk team'
        required: true
        default: 'Snyk TSM APJ'
      country:
        description: 'Country'
        required: false

jobs:
  terraform_destroy:
    name: 'Terraform destroy'
    runs-on: ubuntu-latest
    environment: snyk_aws_demo
    env:
      AWS_REGION: ap-northeast-1
      DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=./terraform/ecs init 

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check ./terraform/ecs

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=./terraform/ecs plan -input=false -destroy -out=tfplan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". 
      # See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform destroy
      run: |
        terraform -chdir=./terraform/ecs apply -destroy -auto-approve -input=false
